syntax = "proto3";

package hope.persistence;

import "google/protobuf/wrappers.proto";
import "domain/view.proto";

option java_multiple_files = true;
option java_outer_classname = "PersistenceProto";
option java_package = "hope.proto.persistence";

enum DBMS {
  MYSQL = 0;
  POSTGRESQL = 1;
  ORACLE = 2;
  SQLSERVER = 3;
  DB2 = 4;
  H2 = 5;
  HSQLDB = 6;
  SQLITE = 7;
  SYBASE = 8;
  INFORMIX = 9;
  DERBY = 10;
  MARIADB = 11;
}

// base on liquibase's https://docs.liquibase.com/change-types/sql.html
// It is useful for complex changes that aren't supported through Liquibase's automated Change Types and to work around bugs and limitations of Liquibase.
// The SQL contained in the `<sql>` Change Type can be multi-line.
message Liquibase {
  // This is a must, the version is append only please do not change it
  uint32 version = 1;

  // (Optional) why do this customization
  string comment = 2;

  // Support DBMS
  // like: `h2, oracle, mysql`
  repeated  DBMS dbms = 3;

  // if this set to true, then the support dbms become exclude dbms: `!h2, oracle, mysql`
  bool  negative = 4;

  // the customized SQL
  repeated string sql = 30;
}


// See: https://github.com/jakartaee/persistence/blob/master/api/src/main/java/jakarta/persistence/UniqueConstraint.java
//
// Specifies a unique constraint the generated DDL for a primary or secondary table.
//
// Example:
//    @Entity
//    @Table(name="EMP",
//        uniqueConstraints=@UniqueConstraint(columnNames={"EMP_NAME", "EMP_ID"})
//    )
//    public class Employee { ... }
//
message UniqueConstraint {

  // (Optional) The name of the unique constraint.
  // Defaults to a provider-chosen name.
  string name = 1;

  // (Optional) The name of the table that the unique constraint is associated with.
  // Defaults to the table of the entity.
  string table = 2;

  // (Optional) The names of the columns that make up the unique constraint.
  // Defaults to the primary key column name of the table.
  repeated string column_list = 3;
}


// this is the JPA standard define the table and columns
// See: https://github.com/jakartaee/persistence/blob/master/api/src/main/java/jakarta/persistence/Index.java
message Index {

  // (Optional) The name of the index.
  // Defaults to a provider-chosen name.
  string name = 1;

  // (Optional) The name of the table that the index is associated with.
  // Defaults to the table of the entity.
  string table = 2;

  // (Optional) The names of the columns that are included in the index.
  // Defaults to the primary key column name of the table.
  repeated string column_list = 3;

  // (Optional) Whether the index is unique.  This is a
  // shortcut for the `UniqueConstraint` annotation at the table
  // level and is useful for when the unique key constraint
  // corresponds to only a single column. This constraint applies
  // in addition to any constraint entailed by primary key mapping and
  // to constraints specified at the table level.
  google.protobuf.BoolValue unique = 4;
}



// this is the JPA standard define the table
// See: https://github.com/jakartaee/persistence/blob/master/api/src/main/java/jakarta/persistence/Table.java
//
// Specifies the primary table for the annotated entity. Additional
// tables may be specified using {@link SecondaryTable} or {@link SecondaryTables} annotation.
// If no `Table` annotation is specified for an entity class, the
// default values apply.
//
// Example:
//    @Entity
//    @Table(name="CUST",schema="RECORDS")
//    public class Customer { ... }
//
message Table {

  // (Optional) The name of the table.
  // Defaults to the entity name.
  string name = 1;

  // (Optional) The catalog of the table.
  // Defaults to the default catalog.
  string catalog = 2;

  // (Optional) The schema of the table.
  // Defaults to the default schema for user.
  string schema = 3;

  // (Optional) A description of the table.
  string description = 4;

  // (Optional) Unique constraints that are to be placed on
  // the table. These are only used if table generation is in
  // effect. These constraints apply in addition to any constraint
  // entailed by primary key mapping and to constraints specified
  // at the column level.
  repeated UniqueConstraint unique_constraints = 5;

  // (Optional) Indexes for the table. These are only used if
  // table generation is in effect.
  repeated Index indexes = 6;


  // all support views of the entities; default is all;
  // predefined for share
  repeated View views = 10;

  enum Wire {
    //Default is All Meaning it is a full domain controlled by the system
    ALL = 0;
    //Only include the `Auditable` wire protocol
    AUDITABLE = 1;
    //Only include the `Deletable` wire protocol
    DELETABLE = 2;
    //Only include the `Identifiable` wire protocol
    IDENTIFIABLE = 3;
    //Only include the `Tenantable` wire protocol
    TENANTABLE = 4;
    //Only include the `Versionable` wire protocol
    VERSIONABLE = 5;
    //None of the wire protocol should apply, control by self
    NONE = 6;
  }

  //Composite wire protocol, May included all the extends
  //Default include all the extends
  //If this is  [AUDITABLE,DELETABLE] then it will only include the `Auditable` and `Deletable` wire protocol;
  repeated Wire wires = 51;


  repeated  Liquibase liquibase = 100;
}


// this is the JPA standard define the table and columns
//
// See https://github.com/jakartaee/persistence/blob/master/api/src/main/java/jakarta/persistence/Column.java
//
// Specifies the mapped column for a persistent property or field.
// If no Column annotation is specified, the default values apply.
//
// Example 1:
//    @Column(name="DESC", nullable=false)
//    public String getDescription() { return description; }
//
// Example 2:
//    @Column(name="DESC",
//            columnDefinition="CLOB NOT NULL"
//            table="EMP_DETAIL")
//    public String getDescription() { return description; }
//
//Example 3:
//    Column(name="ORDER_COST", updatable=false, precision=12, scale=2)
//    public BigDecimal getCost() { return cost; }
//
message Column {

  // (Optional) The name of the column.
  // Defaults to the property or field name.
  string name = 1;

  // (Optional) A description of the column.
  // Defaults to the property or field name.
  string description = 2;

  // (Optional) Whether the column is a unique key.  This is a
  // shortcut for the `UniqueConstraint` annotation at the table
  // level and is useful for when the unique key constraint
  // corresponds to only a single column. This constraint applies
  // in addition to any constraint entailed by primary key mapping and
  // to constraints specified at the table level.
  google.protobuf.BoolValue unique = 3;

  // (Optional) Whether the database column is nullable.
  google.protobuf.BoolValue nullable = 4;

  // (Optional) Whether the column is included in SQL INSERT generated by the persistence provider.
  google.protobuf.BoolValue insertable = 5;

  // (Optional) Whether the column is included in SQL UPDATE generated by the persistence provider.
  google.protobuf.BoolValue updatable = 6;

  // (Optional) Whether the column is included in {@code Example} filter query conditions.
  google.protobuf.BoolValue searchable = 7;

  // (Optional) Whether the column should be sortable.
  google.protobuf.BoolValue sortable = 8;

  // (Optional) The SQL fragment that is used when generating the DDL for the column.
  // Defaults to the generated SQL to create column of the inferred type.
  string column_definition = 17;

  // (Optional) The name of the table that contains the column.
  // If absent the column is assumed to be in the primary table.
  string table = 18;

  // (Optional) The length of the column. (Applies only if a
  // string-valued column is used.)
  google.protobuf.Int32Value length = 19;

  // (Optional) The precision for a decimal (exact numeric) column.
  // (Applies only if a decimal column is used.)
  // The precision value must be set by the developer if used when generating the DDL for the column.
  google.protobuf.Int32Value precision = 20;

  // (Optional) The scale for a decimal (exact numeric) column.
  // (Applies only if a decimal column is used.)
  google.protobuf.Int32Value scale = 21;

  // (Optional) Whether this field is ID
  google.protobuf.BoolValue id = 22;

  // (Optional) The enum persist type for an enum column.
  EnumType enum_type = 23;

  GeneratedValue generated_value = 24;

  //See: https://github.com/jakartaee/persistence/blob/master/api/src/main/java/jakarta/persistence/Transient.java
  // Specifies that the property or field is not persistent. It is used
  // to annotate a property or field of an entity class, mapped superclass,or embeddable class.
  google.protobuf.BoolValue transient = 25;

  // (Optional) The default value for the column.
  // input always stream, underling translate it to the right type
  // no framework specific rule check
  string default_value = 26;

  enum Type {
    UN_KNOWN = 0;
    /** Identifies the generic SQL type {@code BIT}. */
    BIT = 1;
    /** Identifies the generic SQL type {@code TINYINT}. */
    TINYINT = 2;
    /** Identifies the generic SQL type {@code SMALLINT}. */
    SMALLINT = 3;
    /** Identifies the generic SQL type {@code INTEGER}. */
    INTEGER = 4;
    /** Identifies the generic SQL type {@code BIGINT}. */
    BIGINT = 5;
    /** Identifies the generic SQL type {@code FLOAT}. */
    FLOAT = 6;
    /** Identifies the generic SQL type {@code DOUBLE}. */
    DOUBLE = 7;
    /** Identifies the generic SQL type {@code NUMERIC}. */
    NUMERIC = 8;
    /** Identifies the generic SQL type {@code DECIMAL}. */
    DECIMAL = 9;
    /** Identifies the generic SQL type {@code CHAR}. */
    CHAR = 10;
    /** Identifies the generic SQL type {@code VARCHAR}. */
    VARCHAR = 11;
    /** Identifies the generic SQL type {@code LONGVARCHAR}. */
    LONGVARCHAR = 12;
    /** Identifies the generic SQL type {@code DATE}. */
    DATE = 13;
    /** Identifies the generic SQL type {@code TIME}. */
    TIME = 14;
    /** Identifies the generic SQL type {@code TIMESTAMP}. */
    TIMESTAMP = 15;
    /** Identifies the generic SQL type {@code BINARY}. */
    BINARY = 16;
    /** Identifies the generic SQL type {@code VARBINARY}. */
    VARBINARY = 17;
    /** Identifies the generic SQL type {@code LONGVARBINARY}. */
    LONGVARBINARY = 18;
    /** Identifies the generic SQL type {@code BLOB}. */
    BLOB = 19;
    /** Identifies the generic SQL type {@code CLOB}. */
    CLOB = 20;
    /** Identifies the generic SQL type {@code BOOLEAN}. */
    BOOLEAN = 21;

    /* 4.0 Types */

    /** Identifies the SQL type {@code ROWID}. */
    ROWID = 22;
    /* 4.2 Types */

    /** Identifies the generic SQL type {@code TIME_WITH_TIMEZONE}. */
    TIME_WITH_TIMEZONE = 28;

    /** Identifies the generic SQL type {@code TIMESTAMP_WITH_TIMEZONE}. */
    TIMESTAMP_WITH_TIMEZONE = 29;
  }

  // if this is defined explicitly, then this type will override the type inferred from the field type
  Type type = 50;
}

// See: https://github.com/jakartaee/persistence/blob/master/api/src/main/java/jakarta/persistence/EnumType.java
//
// Defines mapping for enumerated types.  The constants of this
// enumerated type specify how a persistent property or
// field of an enumerated type should be persisted.
enum EnumType {
  //Not defined enum type
  DEFAULT = 0;
  // Persist enumerated type property or field as a string.
  STRING = 1;
  // Persist enumerated type property or field as an integer.
  ORDINAL = 2;
  // If
  CODE = 3;
}

//See: https://github.com/jakartaee/persistence/blob/master/api/src/main/java/jakarta/persistence/GenerationType.java
// Defines the types of primary key generation strategies.
enum GenerationType {

  // Indicates that the persistence provider must assign
  // primary keys for the entity using an underlying
  // database table to ensure uniqueness.
  TABLE = 0;

  // Indicates that the persistence provider must assign
  // primary keys for the entity using a database
  SEQUENCE = 1;

  // Indicates that the persistence provider must assign
  // primary keys for the entity using a database
  // identity column.
  IDENTITY = 2;

  //  Indicates that the persistence provider must assign
  //  primary keys for the entity by generating an RFC 4122
  //   Universally Unique Identifier.
  UUID = 3;

  // Indicates that the persistence provider should pick an
  // appropriate strategy for the particular database. The
  // `AUTO` generation strategy may expect a database
  // resource to exist, or it may attempt to create one. A vendor
  // may provide documentation on how to create such resources
  // in the event that it does not support schema generation
  // or cannot create the schema resource at runtime.
  AUTO = 4;
}

// See: https://github.com/jakartaee/persistence/blob/master/api/src/main/java/jakarta/persistence/GeneratedValue.java
//
// Provides for the specification of generation strategies for the values of primary keys.
// The `GeneratedValue` annotation may be applied to a primary key property
// or field of an entity or mapped superclass in conjunction with the `Id` annotation.
// The use of the `GeneratedValue` annotation is only required to be supported for
// simple primary keys.
// Use of the `GeneratedValue` annotation is not supported for derived primary keys.
//
// Example 1:
//   @Id
//   @GeneratedValue(strategy=SEQUENCE, generator="CUST_SEQ")
//   @Column(name="CUST_ID")
//   public Long getId() { return id; }
//
// Example 2:
//  @Id
//  @GeneratedValue(strategy=TABLE, generator="CUST_GEN")
//  @Column(name="CUST_ID")
//  public Long getId() { return id; }
//
message GeneratedValue {

  // (Optional) The primary key generation strategy that the
  // persistence provider must use to generate the annotated
  // entity primary key.
  GenerationType strategy = 1;

  // (Optional) The name of the primary key generator to use as
  // specified in the `@SequenceGenerator` or
  // `@TableGenerator` annotation.
  string generator = 2;
}